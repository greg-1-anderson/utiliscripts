#!/bin/bash
#
# Usage:
#
#    drupal-backup-all site1 site2 site3
#
# Alternate example - backup each site daily at 3am from cron:
#
#    0  3  *  *  *  /usr/bin/env PATH=/usr/local/bin:/usr/bin:/bin drupal-backup-all site1 site2 site3
#
# Important:
#
# Insure that the user who runs this script is a member of the www-data group.
# If this script is run by a user named 'archive', then:
#
#   sudo /usr/sbin/usermod -a -G www-data archive
#
# Configuration:
#
# Each site named in the commandline arguments must have a Drush site alias
# file named, for example, site1.aliases.drushrc.php, and it must have alias
# records named live, backup and update.  The live site is usually remote,
# while the backup and update sites must be local.
#
# Example alias file site1.aliases.drushrc.php:
#
# $aliases['live'] = array (
#   'remote-host' => 'vps.myisp.com',
#   'remote-user' => 'www-admin',
#   'uri' => 'http://site1.org',
#   'root' => '/srv/www/site1.org/htdocs',
# );
#
# $aliases['backup'] = array (
#   'root' => '/srv/www/backup.site1.org/htdocs',
#   'uri' => 'http://site1.org',
#   'target-command-specific' => array (
#     'sql-sync' => array (
#       'enable' => array ('environment_indicator'),
#       'permission' => array (
#         'authenticated user' => array (
#           'add' => array('access environment indicator'),
#         ),
#         'anonymous user' => array (
#           'add' => 'access environment indicator',
#         ),
#       ),
#     ),
#   ),
# );
#
# $aliases['update'] = array (
#   'root' => '/srv/www/backup.site1.org/htdocs',
#   'uri' => 'http://site1.org',
#   'target-command-specific' => array (
#     'sql-sync' => array (
#       'enable' => array ('stage_file_proxy'),
#     ),
#     'permission' => array(
#       'authenticated user' => array(
#         'add' => array('access environment indicator'),
#       ),
#       'anonymous user' => array(
#         'add' => 'access environment indicator',
#         'remove' => 'access content',
#       ),
#     ),
#     'sanitize' => TRUE,
#     'sanitize-password' => 'secretpassword',
#   ),
# );
#
# You must manually set up the 'backup' and 'update' sites; this script
# will not create them for you.  The sql-sync enable configuration shown
# above is an example; for this site, environment indicator is enabled on
# the backup site, and stage_file_proxy is enabled on the update site. You
# do not need to enable these modules, and you may wish to enable others.
# If you use this feature, you must copy the sync-enable script to your
# ~/.drush folder.  For more information on sync-enable, see:
#
#   http://drupalcode.org/project/drush.git/blob/HEAD:/examples/sync_enable.drush.inc
#
# See also: http://groups.drupal.org/node/263458#comment-840478
#

FORCE=false
FORCE_UPDATE=false
NOTIFY=
VERBOSE=false
SIMULATE=false
EXEC=

# Start with an empty backup list.
backup_list=
backup_base_dir=/data/archive/drupal
hash_tables=node

#
# Parse command line args
#
while [ $# -gt 0 ] ; do

  option=$1
  shift

  case "$option" in
    # Force backup: the live site will always be copied to the backup site
    --force|-f)
      FORCE=true
      ;;

    # Force update: if an update is needed, it will always be done, even if
    # the same update was already completed the last time this script executed.
    --force-update)
      FORCE_UPDATE=true
      ;;

    # Notify: email address to send notifications of availabile updates
    --notify)
      NOTIFY="$1"
      shift
      ;;

    --ssh-relay)
      ssh_relay=$1
      shift
      ;;

    --verbose|-v)
      VERBOSE=true
      QUIET=
      ;;

    --simulate|-s)
      SIMULATE=true
      EXEC=echo
      backup_base_dir=/tmp/archive/drupal
      ;;

    -* )
      echo "Unknown option $option"
      exit 1;
      ;;

    * )
      # Test to see if we have site aliases defined for the specified site.
      # TODO: We assume 'live' is remote and 'backup' is local.  Confirm this?
      site=$option
      if [ -z "$(drush site-alias @$site.live 2>/dev/null)" ] || [ -z "$(drush site-alias @$site.backup 2>/dev/null)" ] ; then
        (
          echo "The site alias @$option is either not defined, or is missing"
          echo "'live' and/or 'backup' site records."
        ) 1>&2
        exit 1
      fi
      backup_list="$backup_list $site"
      ;;

    esac
done

if [ -z "$backup_list" ] ; then
  echo "No backup sites listed." 1>&2
  exit 1
fi

# Send stdout to /dev/null unless in VERBOSE mode.
# To send data to stdout when not VERBOSE, add 1>&3
# to the end of command.
# http://unix.stackexchange.com/questions/28740/bash-use-a-variable-to-store-stderrstdout-redirection
if $VERBOSE ; then
  exec 3>&1
else
  exec 3>&1
  exec 1>/dev/null
fi

echo ":::::::::::::::::::::::::::::: $(date) ::::::::::::::::::::::::::::" 1>&2

# Keep a list of sites updated
update_list=
update_notify_file=$(mktemp drupal-backup-notify.XXXXXXXXXX)

# Loop over all of the sites, backing up each in turn.
for site in ${backup_list} ; do
  backup_dir=$backup_base_dir/$site
  mkdir -p "$backup_dir"
  backup_log_file=$backup_dir/${site}-backup.log
  hash_file=$backup_dir/${site}.hash
  cur_hash_file=$backup_dir/${site}-cur.hash
  backup_hash_file=$backup_dir/${site}-bak.hash
  diff_file=$backup_dir/${site}.hash
  dump_file=$backup_dir/${site}.sql
  history_dir=$backup_dir/history
  update_list_file=$backup_dir/${site}.updates
  cur_update_list_file=$backup_dir/${site}-cur.updates
  update_log_file=$backup_dir/${site}-update.log
  msg="=== Checking ${site} for changes ==="
  $FORCE && msg="=== Backup forced for ${site} ==="
  echo $msg 1>&2
  drush @$site.live sql-query --db-prefix 'select max(nid),max(changed) from {node}' > $cur_hash_file 2>/dev/null
  if [ ! -f $hash_file ] || [ "x`diff $cur_hash_file $hash_file`" != "x" ] || $FORCE ; then
    msg="$(date "+%Y-%m-%d %H:%M")"
    echo "$msg :: Begin backup of $site" 1>&2
    echo $msg >> $backup_log_file

    # Show which tables changed since last time.
    diff -U 0 $hash_file $cur_hash_file > $diff_file
    mv -f $cur_hash_file $hash_file

    # First, insure that the git repository is clean on the live site.
    # We expect that changes to code should not be made on the live site,
    # but if there are any dirty files in the git repository, we will
    # autocommit them.
    live_root=$(drush drupal-directory @$site.live:%root)
    drush @$site.live ssh "cd $live_root && git add -A && git commit -m 'Automatic commit by drupal-backup-all script' && git push" 1>&2
    # Next, make sure backup site has the most recent code.
    (
      cd $(drush drupal-directory @$site.backup)
      $EXEC git pull 1>&2
    )
    # Move the previous database dump into the history folder,
    # after first compressing it with gzip
    if [ -f "$dump_file" ] ; then
      mkdir -p $history_dir/daily
      compressed_dump="$dump_file".gz
      cat "$dump_file" | gzip > "$compressed_dump"
      migratehistories --quiet --migrating "$compressed_dump" --history-root "$history_dir" --target-extension .sql.gz
    fi
    # Get current commit tag and write it into live database
    head_commithash=$(drush @$site.live ssh "cd $live_root && git rev-parse HEAD")
    $EXEC drush -v @$site.live vset --always-set -y git_commithash "$head_commithash"

    # Sync the sql database from the live site to the backup site,
    # Drop the database into place in the backup folder by using it
    # as the target-dump.
    $EXEC drush -y sql-sync --target-dump="$dump_file" @$site.live @$site.backup
    # Clear the cache, drop the watchdog entries, and overwrite the backup file
    # TODO: It would be more efficient to de-select the cache and watchdog
    # tables in the sql-sync above.
    $EXEC drush -y @$site.backup watchdog-delete all 1>&2
    $EXEC drush -y @$site.backup cc all 1>&2
    $EXEC drush -y @$site.backup sql-dump --result-file="$dump_file" 1>&2

    # Check to see if %files has been committed to the git repository.
    # If it has not, then the log line will be empty.
    files_dir=$(drush dd @$site.backup:%files)
    log_line=$(cd $(drush dd @$site.backup:%files); git log -1 --oneline $files_dir)
    # If %files are not in the repository, then copy them via rsync
    if [ -z "$log_line" ] ; then
      #echo drush -y -v rsync @$site.live:%files @$site.backup:%files
      $EXEC drush -y -v rsync @$site.live:%files @$site.backup:%files
    fi

    # Do the same operation with %private
    private_dir=$(drush dd @$site.backup:%private 2>/dev/null)
    if [ -n "$private_dir" ] ; then
      log_line=$(cd $(drush dd @$site.backup:%private); git log -1 --oneline $private_dir)
      # If %private are not in the repository, then copy them via rsync
      if [ -z "$log_line" ] ; then
        #echo drush -y -v rsync @$site.live:%private @$site.backup:%private
        $EXEC drush -y -v rsync @$site.live:%private @$site.backup:%private
      fi
    fi

    drush @$site.backup sql-query --db-prefix 'select max(nid),max(changed) from {node}' > $backup_hash_file 2>/dev/null
    if [ "x`diff $hash_file $backup_hash_file`" != "x" ] ; then
      # We don't want to take the site offline while backing up, but it would be
      # useful if we could disable editing while backups are in progress.  Maybe
      # remove edit permissions from all roles before backup, and restore them
      # when done?  That would have the useful side effect of making the backup
      # sites uneditable. On the flip side, we'd also have to remember to restore
      # the permissions correctly if we ever had to restore the live site from
      # the backup.
      echo "[ERROR] Backup MIGHT have failed for $site (or someone edited it during the backup)" 1>&2
    else
      echo "[ok] Backup complete for $site" 1>&2
    fi

    # Make sure that the group for the files remains www-data
    $EXEC find $(drush drupal-directory @$site.backup) \! -group www-data -exec chgrp www-data {} \;

    # Keep calm and clear the cache, in case any files changed
    $EXEC drush -y @$site.backup cache-clear all

  else
    echo "[n/a] Backup not needed for $site" 1>&2
    rm -f $cur_hash_file
  fi

  # Check to see if any updates are available.
  echo "=== Checking ${site} for updates ===" 1>&2
  drush @$site.backup pm-updatecode -n --pipe > $cur_update_list_file 2>/dev/null
  if [ -s $cur_update_list_file ] ; then
    if [ ! -f $update_list_file ] || [ "x`diff $cur_update_list_file $update_list_file`" != "x" ] || $FORCE_UPDATE ; then
      # If there is a @site.update alias defined, then automatically
      # perform a pm-update, so the result will be available for testing.
      if [ -n "$(drush site-alias @$site.update 2>/dev/null)" ] ; then
        # TODO: If we preserved the creation date of $update_list_file,
        # then we could output how long this site has been waiting for an
        # update below.
        mv -f $cur_update_list_file $update_list_file
        msg="$(date "+%Y-%m-%d %H:%M") :: Begin update of $site"
        echo $msg 1>&2

        # Make sure update site has the most recent code.
        (
          cd $(drush drupal-directory @$site.update)
          # TODO: we could use `git pull backup master 1>&2` here for increased
          # performance (pull locally rather than remotely) if we were sure that
          # the git remote 'backup' was defined.
          $EXEC git pull 1>&2
        )
        # Sync the database
        $EXEC drush -y sql-sync --source-dump="$dump_file" @$site.backup @$site.update
        $EXEC drush -y @$site.update cc all 1>&2

        # Again, copy %files and %private for convenience
        files_dir=$(drush dd @$site.update:%files)
        log_line=$(cd $(drush dd @$site.update:%files); git log -1 --oneline $files_dir)
        if [ -z "$log_line" ] ; then
          $EXEC drush -y rsync @$site.backup:%files @$site.update:%files
        fi
        private_dir=$(drush dd @$site.update:%private 2>/dev/null)
        if [ -n "$private_dir" ] ; then
          log_line=$(cd $(drush dd @$site.update:%private); git log -1 --oneline $private_dir)
          # If %private are not in the repository, then copy them via rsync
          if [ -z "$log_line" ] ; then
            $EXEC drush -y rsync @$site.backup:%private @$site.update:%private
          fi
        fi

        # Run the update
        update_list="${update_list} $site"
        $SIMULATE && echo drush -y @$site.update pm-update 1>&2
        $SIMULATE && echo drush -n @$site.update pm-updatecode > $update_log_file 2>&1
        $SIMULATE || drush -y @$site.update pm-update > $update_log_file 2>&1
        (
          echo "=== Update log for ${site} ==="
          echo
          date "+%Y-%m-%d %H:%M"
          echo
          cat $update_log_file
          echo
        ) >> $update_notify_file

        # Make sure that the group for the files remains www-data
        $EXEC find $(drush drupal-directory @$site.update) \! -group www-data -exec chgrp www-data {} \;

        echo "Update complete for $site" 1>&2
      else
        echo "Update needed for $site; please make an alias for @site.update" 1>&2
        # Add content to the update list so that it will be different, and
        # we will try again next time.
        date >> $update_list_file
      fi
    else
      echo "No update needed for $site; successfully updated last backup" 1>&2
      rm -f $cur_update_list_file
    fi
  else
    echo "No update needed for $site; live site is up-to-date" 1>&2
    rm -f $cur_update_list_file
    rm -f $update_list_file
    rm -f $update_log_file
  fi
done

# If 'notify' was specified, then send email with the update log
if [ -n "${update_list}" ] && [ -n "$NOTIFY" ] ; then
  if [ ! $SIMULATE ] && [ -n "${ssh_relay}" ] ; then
    (ssh "${ssh_relay} mail -s \"'Drupal update log for ${update_list}'\" $NOTIFY") < $update_notify_file
  else
    $EXEC mail -s "Drupal update log for ${update_list}" $NOTIFY < $update_notify_file
  fi
fi

$SIMULATE && cat $update_notify_file
rm -f $update_notify_file
