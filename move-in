#!/bin/bash

#
# Barge in to a new system and make it mine.
#
#	+ Insures the machine has a public / private key pair
#	  stored in a location where it will be backed up.
#
#	+ Pulls down utiliscripts and adds them to the PATH.
#
# Good follow-up commands include:
#
#	install-components
#	syncwith $USER@someothermachine
#


# Don't allow this as root unless you have logged in as root.
# I don't know that I recommend running this as root, but neither do I prevent it.
if [ "$USER" == "root" ] && [ $HOME != "/root" ]
then
	echo "Do not run this script via sudo root"
        exit 1
fi

# Set up some default locations
if [ -z "$UTILISCRIPTS" ] ; then
	export UTILISCRIPTS=$HOME/local/utiliscripts
fi

if [ -z "$INSTALLATION_DATA" ] ; then
	export INSTALLATION_DATA=$HOME/Documents/Installation/InstallData
fi

if [ -z "$SSH_KEY_ARCHIVE" ] ; then
	export SSH_KEY_ARCHIVE=$INSTALLATION_DATA/ssh_key_archive
fi

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  I N S U R E   S S H   K E Y   P A I R S   A R E   S E T   U P
#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

host=`hostname -s`
keytype=rsa
UTILISCRIPTS_DIR=${UTILISCRIPTS%/*}

mkdir -p $HOME/.ssh
mkdir -p $SSH_KEY_ARCHIVE
mkdir -p $UTILISCRIPTS_DIR

archive_key="$SSH_KEY_ARCHIVE/${host}_id_rsa"
if [ -f "${archive_key%rsa}"dsa ]
then
	archive_key="${archive_key%rsa}"dsa
        keytype=dsa
fi

# If we do not have a public/private key pair for this machine, then generate or restore one
if [ ! -f "$HOME/.ssh/id_$keytype" ]
then
	if [ -f "$archive_key" ] && [ -f "${archive_key}.pub" ]
        then
        	echo "Restoring public / private key pair for $host"
                cp -f "$archive_key" "$HOME/.ssh/id_${keytype}"
                cp -f "${archive_key}.pub" "$HOME/.ssh/id_${keytype}.pub"
        else
		echo "Generating a public / private key pair for this system; please protect it with a password."
		ssh-keygen -t $keytype -f $HOME/.ssh/id_$keytype
        fi
fi

# If we have an archive of the public / private key pair for this machine, make sure it is accurate.
# If the key has not been archived yet, then archive it.
if [ -f "$archive_key" ] && [ -f "${archive_key}.pub" ]
then
        diff -q "$HOME/.ssh/id_${keytype}" "$archive_key"
        if [ $? != 0 ]
        then
        	echo "WARNING: The archived key for $host is different than the current public / private key pair."
                echo "Remove one of the following pairs, then run this script again to fix:"
                echo "        rm \"$archive_key\" \"${archive_key}.pub\""
                echo " - OR -"
                echo "        rm \"$HOME/.ssh/id_$keytype\" \"$HOME/.ssh/id_${keytype}.pub\""
        fi
else
        echo "Archiving public / private key pair for $host"
        cp -f "$HOME/.ssh/id_${keytype}" "$archive_key" 
        cp -f "$HOME/.ssh/id_${keytype}.pub" "${archive_key}.pub"
        
        # Try to give the private key a new password, using empty for
        # the current password.  If this works, then balk.
        ssh-keygen -p -P "" -N "empty_passwords_are_bad" -f "$archive_key" > /dev/null 2>&1
        if [ $? == 0 ]
        then
        	echo "WARNING: The password for id_${keytype} for $host is empty; key archiving ABORTED."
                rm -f "$archive_key"
        fi
fi	

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   U T I L I S C R I P T S
#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# If we do not already have utiliscripts, then get them with git

if [ ! -d $UTILISCRIPTS ] ; then

        (
                cd $UTILISCRIPTS_DIR
                # read+write for ga, read-only for everyone else
                if [ "$USER" == "ga" ]
                then
                	git clone git@github.com:greg-1-anderson/utiliscripts.git
                        if [ $? <> 0 ]
                        then
                        	echo "Could not clone a r/w copy of utiliscripts; cloning a r/o copy instead."
                        fi
                fi
                
                if [ ! -d $UTILISCRIPTS ] ; then
                	git clone git://github.com/greg-1-anderson/utiliscripts.git
                fi
        )

fi

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   D R U S H
#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

# If we do not already have drush, then get the master branch with git

d=`which drush`
if [ -z "$d" ] ; then

        (
                cd $HOME/local
                # read+write for ga, read-only for everyone else
                if [ "$USER" == "ga" ]
                then
                        git clone --branch master greg1anderson@git.drupal.org:project/drush.git
                        if [ $? <> 0 ]
                        then
                        	echo "Could not clone a r/w copy of drush; cloning a r/o copy instead."
                        fi
                fi
                
                if [ ! -d drush ] ; then
			git clone --branch master http://git.drupal.org/project/drush.git
                fi
        )

fi

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  S E T   U P   B A S H   A N D   E N V I R O N M E N T
#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

#
# Get rid of the old .bash_customizations file if it exists
#
if [ -f $HOME/.bash_customizations ]; then
	rm $HOME/.bash_customizations
fi

# Put in uniform drushrc.php

mkdir -p $HOME/.drush
if [ -f $HOME/work/config/drushrc.php ]
then
	if [ -f  $HOME/.drush/drushrc.php ]
        then
        	# Back up the old drushrc.php, unless it is a symbolic link, in which case we just get rid of it.
        	drushrctype="`stat --printf='%F' $HOME/.drush/drushrc.php`"
		if [ "$drushrctype" != "symbolic link" ]
                then
	        	mv $HOME/.drush/drushrc.php "$HOME/.drush/drushrc.php-"`date "+%s"`
                else
                	rm $HOME/.drush/drushrc.php
        	fi
        fi
        ln -s $HOME/work/config/drushrc.php $HOME/.drush
fi

#
# Customize bash settings
#

# If we have not set the location of the UTILISCRIPTS yet,
# write it to $HOME/.bashrc.  Only do this once, in case
# the user might care to change it.
chkbashrc=`grep '\(UTILISCRIPTS\|Bash Customizations\)' $HOME/.bashrc`
if [ "X$chkbashrc" = "X" ] ; then
cat <<- __END__ >> $HOME/.bashrc
export UTILISCRIPTS=$UTILISCRIPTS
export SSH_KEY_ARCHIVE=$SSH_KEY_ARCHIVE
if [ "x\`echo \$PATH | grep \$UTILISCRIPTS\`" == "x" ]
then
	export PATH=\$PATH:\$UTILISCRIPTS
fi
__END__
fi

# If we have not set the location of the drush yet,
# write it to $HOME/.bashrc.  Only do this once, in case
# the user might care to change it.
chkbashrc=`grep '\(drush\|Bash Customizations\)' $HOME/.bashrc`
if [ "X$chkbashrc" = "X" ] ; then
cat <<- __END__ >> $HOME/.bashrc
if [ "x\`echo \$PATH | grep drush\`" == "x" ]
then
	export PATH=\$PATH:\$HOME/local/drush
fi
__END__
fi

# Rewrite the "Bash Customizations" section
sed -i -e '/Include Bash Customizations/,/End Bash Customizations/ d' $HOME/.bashrc
cat <<- __END__ >> $HOME/.bashrc
# Include Bash Customizations
if [ -f $UTILISCRIPTS/custom-bashrc ]; then
	. $UTILISCRIPTS/custom-bashrc
fi
# End Bash Customizations
__END__


#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  S E T   U P   P R E F E R E N C E S   F O R    V A R I O U S    A P P L I C A T I O N S
#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


#
# Set up nedit default preferences
#
mkdir -p $HOME/.nedit
if [ -f $HOME/.nedit/nedit.rc ] ; then

	sed -i $HOME/.nedit/nedit.rc \
		-e 's/^\(nedit.autoWrap: \).*/\1 None/' \
		-e 's/^\(nedit.openInTab: \).*/\1 False/' \
		-e 's/^\(nedit.statisticsLine: \).*/\1 True/' \
		-e 's/^\(nedit.tabDistance: \).*/\1 8/'


else

	cat <<- __END__ > $HOME/.nedit/nedit.rc
	nedit.autoWrap: None
	nedit.openInTab: False
	nedit.statisticsLine: True
	nedit.tabDistance: 8
	__END__

fi

#
# Git stuff
#
# 'git push' should apply to only the current branch,
# not to every branchname that matches on local and remote repositories.
#
git config --global push.default tracking
git config --global url."ssh://git@git.drupal.org/project/".insteadOf d.o:
git config --global url."ssh://git@git.drupal.org/sandbox/".insteadOf sandbox:





exit 0

# old stuff we don't trust any more.

#
# Set up firefox default preferences
#
# NOTE 1:  If firefox is running, this will not work (firefox will ignore & overwrite on exit)
#
# NOTE 2:  What is 'ime2irqv.default'?  Might this at some point be the wrong location for prefs?
#
mkdir -p $HOME/Downloads
mkdir -p $HOME/.mozilla/firefox/ime2irqv.default

if [ -f $HOME/.mozilla/firefox/ime2irqv.default/prefs.js ] ; then

	grep -v "\(browser.download.dir\|browser.download.downloadDir\|browser.startup.homepage\|browser.startup.page\)" $HOME/.mozilla/firefox/ime2irqv.default/prefs.js > /tmp/prefs.js
	cp -f /tmp/prefs.js $HOME/.mozilla/firefox/ime2irqv.default/prefs.js

fi

cat << __END__ >> $HOME/.mozilla/firefox/ime2irqv.default/prefs.js
user_pref("browser.download.dir", "$HOME/Downloads");
user_pref("browser.download.downloadDir", "$HOME/Downloads");
user_pref("browser.startup.homepage", "http://my.yahoo.com");
user_pref("browser.startup.page", 0);
__END__




#
# Customize based on host and user data
#
host=`uname -n`


#
# Set up a launcher item for the home folder
#
if [ ! -f $HOME/.gnome2/panel2.d/default/launchers/homefolder.desktop ] ; then

	cat <<- __END__ > $HOME/.gnome2/panel2.d/default/launchers/homefolder.desktop
	#!/usr/bin/env xdg-open

	[Desktop Entry]
	Encoding=UTF-8
	Version=1.0
	Name=Home Folder
	Comment=Open '/home/$USER'
	Icon=user-home
	Name[en_US]=Home Folder
	Comment[en_US]=Open '/home/$USER'
	Icon[en_US]=user-home
	URL=file:///home/$USER
	Type=Link
	__END__
fi


#
# Do version-specific stuff
#
ubuntuRevision=`grep '^#deb.*\[' /etc/apt/sources.list | sed -e 's/.*\][^ ]* *\([^ ]*\).*/\1/'`

VERSION_SPECIFIC_CONF_DIR=$HOME/Documents/Installation/InstallData/version-specific/$ubuntuRevision

THEMES_DIR=$VERSION_SPECIFIC_CONF_DIR/Themes
GCONF_DIR=$VERSION_SPECIFIC_CONF_DIR/gconf

#
# Apply preferences from InstallData/gconf if available
#
if [ -d $THEMES_DIR ] && [ -d $HOME/.themes ] ; then
	for theme in `ls $THEMES_DIR/*.tar.gz` ; do
		( cd $HOME/.themes && tar xzvf $THEMES_DIR/$theme )
	done
fi

#
# Apply preferences from InstallData/gconf if available.
#
# To update this conf file:
#
#	gconftool-2 --dump /desktop/gnome/sound /apps/panel | sed -e "s|$USER.desktop|homefolder.desktop|g" > gconf.xml
#
# Then move gconf.xml to InstallData/version-specific/karmic/gconf.xml
# (where 'karmic' is replaced with the name of the specific ubuntu
# revision you're using).  You may also want to add additional gconf
# sections to the dump command above; any preference you dump will
# be restored on move-in.
#
# It is also possible to hand-code setting values using --type string --set,
# as shown below in the desktop-background selection code.  For more
# information on available gconf paths, see:
#
# http://library.gnome.org/admin/system-admin-guide/stable/gconf-8.html.en
#
if [ -f $VERSION_SPECIFIC_CONF_DIR/gconf.xml ] ; then
	gconftool-2 --load $VERSION_SPECIFIC_CONF_DIR/gconf.xml
	
	# Restart gnome-panel so that the configuration
	# changes made above will take effect
	# TODO:  Should we look at gconf.xml to determine if
	# there are any additional processes that must be restarted?
	killall -HUP gnome-panel 2>/dev/null
fi


#
# Select and apply a desktop background
#
DESKTOP_BACKGROUND_DIR=$HOME/Documents/Installation/InstallData/DesktopBackgrounds
DESKTOP_BACKGROUND=$DESKTOP_BACKGROUND_DIR/Ubuntu-Ubuntu_Grass_1280x1024.jpg

if [ -f $DESKTOP_BACKGROUND_DIR/$host.jpg ] ; then
	DESKTOP_BACKGROUND=$DESKTOP_BACKGROUND_DIR/$host.jpg
fi

if [ "x$host" == "xmonolith" ] ; then
	DESKTOP_BACKGROUND=$DESKTOP_BACKGROUND_DIR/Atmospheres_by_Karezoid.jpg
fi

gconftool-2 --type string --set /desktop/gnome/background/picture_filename $DESKTOP_BACKGROUND
gconftool-2 --type string --set /desktop/gnome/background/picture_options zoom

