#!/bin/bash

#
# Barge in to a new system and make it mine.
#
#	+ Insures the machine has a public / private key pair
#	  stored in a location where it will be backed up.
#
#	+ Pulls down utiliscripts and adds them to the PATH.
#
# + Installs Drush, Sublime Text and other useful tools
#   that I use.
#
# + Sets up bash settings and other system preferences.
#
# Good follow-up commands include:
#
#	install-components
#	repair-ubuntu
#


# Don't allow this as root unless you have logged in as root.
# I don't know that I recommend running this as root, but neither do I prevent it.
if [ "$USER" == "root" ] && [ $HOME != "/root" ]
then
	echo "Do not run this script via sudo root"
        exit 1
fi

# Set up some default locations
if [ -z "$UTILISCRIPTS" ] ; then
	export UTILISCRIPTS=$HOME/local/utiliscripts
fi

if [ -z "$INSTALLATION_DATA" ] ; then
	export INSTALLATION_DATA=$HOME/Documents/Installation/InstallData
fi

if [ -z "$SSH_KEY_ARCHIVE" ] ; then
	export SSH_KEY_ARCHIVE=$INSTALLATION_DATA/ssh_key_archive
fi

if [ -z "$DESKTOP_BACKGROUND_DIR" ] ; then
  DESKTOP_BACKGROUND_DIR=$INSTALLATION_DATA/DesktopBackgrounds
fi

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  I N S U R E   S S H   K E Y   P A I R S   A R E   S E T   U P
#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

echo "# Check ssh keys..."

host=`hostname -s`
keytype=rsa
UTILISCRIPTS_DIR=${UTILISCRIPTS%/*}

mkdir -p $HOME/.ssh
mkdir -p $SSH_KEY_ARCHIVE
mkdir -p $UTILISCRIPTS_DIR

archive_key="$SSH_KEY_ARCHIVE/${host}_id_rsa"
if [ -f "${archive_key%rsa}"dsa ]
then
	archive_key="${archive_key%rsa}"dsa
        keytype=dsa
fi

# If we do not have a public/private key pair for this machine, then generate or restore one
if [ ! -f "$HOME/.ssh/id_$keytype" ]
then
	if [ -f "$archive_key" ] && [ -f "${archive_key}.pub" ]
        then
        	echo "Restoring public / private key pair for $host"
                cp -f "$archive_key" "$HOME/.ssh/id_${keytype}"
                cp -f "${archive_key}.pub" "$HOME/.ssh/id_${keytype}.pub"
        else
		echo "Generating a public / private key pair for this system; please protect it with a password."
		ssh-keygen -t $keytype -f $HOME/.ssh/id_$keytype
        fi
fi

# If we have an archive of the public / private key pair for this machine, make sure it is accurate.
# If the key has not been archived yet, then archive it.
if [ -f "$archive_key" ] && [ -f "${archive_key}.pub" ]
then
        diff -q "$HOME/.ssh/id_${keytype}" "$archive_key"
        if [ $? != 0 ]
        then
        	echo "WARNING: The archived key for $host is different than the current public / private key pair."
                echo "Remove one of the following pairs, then run this script again to fix:"
                echo "        rm \"$archive_key\" \"${archive_key}.pub\""
                echo " - OR -"
                echo "        rm \"$HOME/.ssh/id_$keytype\" \"$HOME/.ssh/id_${keytype}.pub\""
        else
		echo "Public and private key already archived as ${archive_key##*/}"
	fi
else
        echo "Archiving public / private key pair for $host"
        cp -f "$HOME/.ssh/id_${keytype}" "$archive_key"
        cp -f "$HOME/.ssh/id_${keytype}.pub" "${archive_key}.pub"

        # Try to give the private key a new password, using empty for
        # the current password.  If this works, then balk.
        ssh-keygen -p -P "" -N "empty_passwords_are_bad" -f "$archive_key" > /dev/null 2>&1
        if [ $? == 0 ]
        then
        	echo "WARNING: The password for id_${keytype} for $host is empty; private key REMOVED from archive."
                rm -f "$archive_key"
        fi
fi

if [ -f "$HOME/.ssh/id_$keytype.pub" ] ; then
	echo "ssh key fingerprint for public key:"
	ssh-keygen -lf "$HOME/.ssh/id_$keytype.pub"
fi

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   U T I L I S C R I P T S
#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

echo "# Check utiliscripts..."

# If we do not already have utiliscripts, then get them with git

if [ ! -d $UTILISCRIPTS ] ; then

        (
                cd $UTILISCRIPTS_DIR
                # read+write for ga, read-only for everyone else
                if [ "$USER" == "ga" ]
                then
                	git clone git@github.com:greg-1-anderson/utiliscripts.git
                        if [ $? <> 0 ]
                        then
                        	echo "Could not clone a r/w copy of utiliscripts; cloning a r/o copy instead."
                        fi
                fi

                if [ ! -d $UTILISCRIPTS ] ; then
                	git clone git://github.com/greg-1-anderson/utiliscripts.git
                fi
        )

fi

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   D R U S H
#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

echo "# Check drush..."

# If we do not already have drush, then get the master branch with git

d=`which drush`
if [ -z "$d" ] && [ ! -d  $HOME/local/drupal/drush ] ; then

        (
                mkdir -p $HOME/local/drupal
                cd $HOME/local/drupal
                # read+write for ga, read-only for everyone else
                if [ "$USER" == "ga" ]
                then
                        git clone --branch master greg1anderson@git.drupal.org:project/drush.git
                        if [ ! -d drush ]
                        then
                        	echo "Could not clone a r/w copy of drush; cloning a r/o copy instead."
                        fi
                fi

                if [ ! -d drush ] ; then
			                  git clone --branch master http://git.drupal.org/project/drush.git
                fi
        )

fi

echo "# Check drush extensions..."

mkdir -p $HOME/local/drupal/drush_extensions

for drush_extension in drush_sup drush_extras dbtng_migrator registry_rebuild sublime_completion ; do

	if [ ! -d "$HOME/local/drupal/drush_extensions/$drush_extension" ] ; then
		(
			cd $HOME/local/drupal/drush_extensions
			$HOME/local/drupal/drush/drush pm-download $drush_extension --destination=$HOME/local/drupal/drush_extensions
		)
	fi

done

# Also copy in some of the example drush extensions from the drush/examples folder

for example_extensions in sync_enable.drush.inc sync_via_http.drush.inc ; do

	if [ ! -f "$HOME/local/drupal/drush_extensions/$example_extensions" ] ; then

		cp "$HOME/local/drupal/drush/examples/$example_extensions" $HOME/local/drupal/drush_extensions

	fi
done

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  G E T   S U B L I M E
#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

if [ -n "$DISPLAY" ] ; then

  echo "# Check sublime..."

  s=`which sublime_text`
  if [ -z "$s" ] && [ ! -d "$HOME/local/sublime-text-2" ]; then

  	sublime_url=`curl http://www.sublimetext.com/2 2>/dev/null | grep 'a href.*Linux 32' | sed -e 's/.*href="\([^"]*\).*/\1/'`
  	if [ -z "$sublime_url" ] ; then
  		sublime_url="http://c758482.r82.cf2.rackcdn.com/Sublime Text 2 Build 2181.tar.bz2"
  	fi
  	sublime_file="${sublime_url##*/}"

  	mkdir -p $HOME/tmp
  	mkdir -p $HOME/local

  	wget -O "$HOME/tmp/$sublime_file" "$sublime_url"
  	tar -xjvf "$HOME/tmp/$sublime_file" -C $HOME/local

  	mv "$HOME/local/Sublime Text 2" $HOME/local/sublime-text-2
  fi

fi

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  S E T   U P   B A S H   A N D   E N V I R O N M E N T
#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

echo "# Check bash environment..."

#
# Get rid of the old .bash_customizations file if it exists
#
if [ -f $HOME/.bash_customizations ]; then
	rm $HOME/.bash_customizations
fi

# Put in uniform drushrc.php

mkdir -p $HOME/.drush
if [ -f $HOME/work/config/drushrc.php ]
then
	if [ -f  $HOME/.drush/drushrc.php ]
        then
        	# Back up the old drushrc.php, unless it is a symbolic link, in which case we just get rid of it.
        	drushrctype="`stat --printf='%F' $HOME/.drush/drushrc.php`"
		if [ "$drushrctype" != "symbolic link" ]
                then
	        	mv $HOME/.drush/drushrc.php "$HOME/.drush/drushrc.php-"`date "+%s"`
                else
                	rm $HOME/.drush/drushrc.php
        	fi
        fi
        ln -s -f $HOME/work/config/drushrc.php $HOME/.drush
        ln -s -f $HOME/work/config/drushrc5.php $HOME/.drush
        ln -s -f $HOME/work/config/drushrc5.php $HOME/.drush/drushrc6.php
fi

#
# Customize bash settings
#

# If we have not set the location of the UTILISCRIPTS yet,
# write it to $HOME/.bashrc.  Only do this once, in case
# the user might care to change it.
chkbashrc=`grep '\(UTILISCRIPTS\|Bash Customizations\)' $HOME/.bashrc`
if [ "X$chkbashrc" = "X" ] ; then
cat <<- __END__ >> $HOME/.bashrc
export UTILISCRIPTS=$UTILISCRIPTS
export SSH_KEY_ARCHIVE=$SSH_KEY_ARCHIVE
if [ "x\`echo \$PATH | grep \$UTILISCRIPTS\`" == "x" ]
then
	export PATH=\$PATH:\$UTILISCRIPTS
fi
__END__
fi

# If we have not set the location of the drush yet,
# write it to $HOME/.bashrc.  Only do this once, in case
# the user might care to change it.
chkbashrc=`grep '\(drush\|Bash Customizations\)' $HOME/.bashrc`
if [ "X$chkbashrc" = "X" ] ; then
cat <<- __END__ >> $HOME/.bashrc
if [ "x\`echo \$PATH | grep drush\`" == "x" ]
then
	export PATH=\$PATH:\$HOME/local/drupal/drush
fi
__END__
fi

# Rewrite the "Bash Customizations" section
sed -i -e '/Include Bash Customizations/,/End Bash Customizations/ d' $HOME/.bashrc
cat <<- __END__ >> $HOME/.bashrc
# Include Bash Customizations
if [ -f $UTILISCRIPTS/custom-bashrc ]; then
	. $UTILISCRIPTS/custom-bashrc
fi
if [ -d "$HOME/local/sublime-text-2" ] ; then
	export PATH=\$PATH:\$HOME/local/sublime-text-2
fi
# End Bash Customizations
__END__


#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
#
#  S E T   U P   P R E F E R E N C E S   F O R    V A R I O U S    A P P L I C A T I O N S
#
#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

echo "# Check preferences and configuration..."

#
# Set up sublime default preferences
#
if [ ! -f $HOME/.config/sublime-text-2/Packages/User/Preferences.sublime-settings ] ; then

mkdir -p $HOME/.config/sublime-text-2/Packages/User

# Set up Sublime default editing preferences to match Drupal php conventions.
# See: http://drupal.org/node/1346890
# Also: http://www.sublimetext.com/forum/viewtopic.php?f=3&t=2704
cat << "__END__" > $HOME/.config/sublime-text-2/Packages/User/Preferences.sublime-settings
{
	"color_scheme": "Packages/Color Scheme - Default/Mac Classic.tmTheme",
	"rulers": [80],
	"tab_size": 2,
	"translate_tabs_to_spaces": true,
	"use_tab_stops": true,
	"trim_automatic_white_space": true,
	"trim_trailing_white_space_on_save": true,
	"ensure_newline_at_eof_on_save": true,
	"fallback_encoding": "UTF-8",
	"default_line_ending": "unix",
	"shift_tab_unindent": true,
  // Characters that are considered to separate words
  "word_separators": "./\\()\"'-:,.;<>~!@#%^&*|+=[]{}`~?"
}
__END__

fi

if [ ! -f "$HOME/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap" ] || [ "`stat --printf='%s' \"$HOME/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap\"`" -lt 10 ] ; then

mkdir -p $HOME/.config/sublime-text-2/Packages/User

cat << "__END__" > "$HOME/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap"
[
  /*
   * Nedit key bindings:
   *
   *  Control-g: Find again                   (Also F3 or [Enter])
   *  Control-shift-g: Find previous          (Also shift-F3 or shift-[Enter])
   *  Control-h: Find under                   (Also ctrl-F3)
   *  Control-shift-h: Find under previous    (Also ctrl-shift-F3)
   *  Control-r: replace                      (Was: ctrl-h)
   *  Control-shift-r: Replace next           (Was: shift-ctrl-h)
   *  Control-l: Go to line                   (Was: ctrl-g)
   *  Control-Shift-9: unindent               (Also ctrl-[, or shift-tab w/ selection that contains "\n")
   *  Control-Shift-0: indent                 (Also ctrl-], or tab w/ selection that contains "\n")
   */
  { "keys": ["ctrl+g"], "command": "find_next" },
  { "keys": ["ctrl+shift+g"], "command": "find_prev" },
  { "keys": ["ctrl+h"], "command": "find_under" },
  { "keys": ["ctrl+shift+h"], "command": "find_under_prev" },
  { "keys": ["ctrl+r"], "command": "show_panel", "args": {"panel": "replace"} },
  { "keys": ["ctrl+shift+r"], "command": "replace_next" },
  { "keys": ["ctrl+shift+9"], "command": "unindent" },
  { "keys": ["ctrl+shift+0"], "command": "indent" },
  { "keys": ["ctrl+l"], "command": "show_overlay", "args": {"overlay": "goto", "text": ":"} },

  /*
   *
   * Remapped Sublime Text key bindings:
   *
   *  Control-shift-=: Expand selection to line (Was: ctrl-l)
   */
  { "keys": ["ctrl+shift+="], "command": "expand_selection", "args": {"to": "line"} },
  /*
   * Removed Sublime Text key bindings:
   *
   *  Control-R: goto symbol
   */
  // { "keys": ["ctrl+r"], "command": "show_overlay", "args": {"overlay": "goto", "text": "@"} },
  /*
   * Repeated Sublime Text key bindings:
   *
   *  We list these standard options again so that they will be shown in
   *  place of our customizations in the Sublime menus.  Usually we want
   *  our customization to show up, but here we do not.
   */
  { "keys": ["ctrl+]"], "command": "indent" },
  { "keys": ["ctrl+["], "command": "unindent" }
]
__END__

fi

# Install Sublime Code Intel plugin
if [ ! -d "$HOME/.config/sublime-text-2/Packages/SublimeCodeIntel" ] ; then

  git clone git://github.com/Kronuz/SublimeCodeIntel.git "$HOME/.config/sublime-text-2/Packages/SublimeCodeIntel"

fi

# Install Sublime PhpDoc plugin
if [ ! -d "$HOME/.config/sublime-text-2/Packages/PhpDoc" ] ; then
  git clone git://github.com/SublimeText/PhpDoc.git "$HOME/.config/sublime-text-2/Packages/PhpDoc"
fi

# Install Sublime Drupal snippets
if [ ! -d "$HOME/.config/sublime-text-2/Packages/DrupalSnippets" ] ; then
  git clone git://gitorious.org/sublime-text-snippets/drupal.git "$HOME/.config/sublime-text-2/Packages/DrupalSnippets"
fi

# Install Suplime php lint
if [ ! -d "$HOME/.config/sublime-text-2/Packages/sublimelint" ] ; then
  git clone git://github.com/lunixbochs/sublimelint.git "$HOME/.config/sublime-text-2/Packages/sublimelint"
fi

# Install Sublime zen coding plugin (if mercurial is available)
# See: http://code.google.com/p/zen-coding/downloads/detail?name=ZenCodingCheatSheet.pdf
hg=`which hg`
if [ ! -z "$hg" ] && [ ! -d "$HOME/.config/sublime-text-2/Packages/sublime-2-zencoding" ] ; then
  hg clone https://bitbucket.org/sublimator/sublime-2-zencoding "$HOME/.config/sublime-text-2/Packages/sublime-2-zencoding"
fi

#
# Set up nedit default preferences
#
mkdir -p $HOME/.nedit
if [ -f $HOME/.nedit/nedit.rc ] ; then

	sed -i $HOME/.nedit/nedit.rc \
		-e 's/^\(nedit.autoWrap: \).*/\1 None/' \
		-e 's/^\(nedit.openInTab: \).*/\1 False/' \
		-e 's/^\(nedit.statisticsLine: \).*/\1 True/' \
		-e 's/^\(nedit.tabDistance: \).*/\1 8/'


else

	cat <<- __END__ > $HOME/.nedit/nedit.rc
	nedit.autoWrap: None
	nedit.openInTab: False
	nedit.statisticsLine: True
	nedit.tabDistance: 8
	__END__

fi

echo "# Check git settings..."

#
# Git stuff
#
# 'git push' should apply to only the current branch,
# not to every branchname that matches on local and remote repositories.
#
git config --global push.default tracking
git config --global url."ssh://git@git.drupal.org/project/".insteadOf d.o:
git config --global url."ssh://git@git.drupal.org/sandbox/".insteadOf sandbox:


# If we can find gconftool-2, AND we have a $DISPLAY, then set up some GUI prefs
g=`which gconftool-2`
if [ -n "$g" ] && [ -n "$DISPLAY" ] ; then
  host=`uname -n`
  #
  # Select and apply a desktop background
  #
  DESKTOP_BACKGROUND=$DESKTOP_BACKGROUND_DIR/Ubuntu-Ubuntu_Grass_1280x1024.jpg

  check_host_bg=`ls -1 "$DESKTOP_BACKGROUND_DIR" | grep -i "$host" | head -n 1`
  if [ -n "$check_host_bg" ] ; then
    DESKTOP_BACKGROUND=$DESKTOP_BACKGROUND_DIR/$check_host_bg
  fi
  if [ -f "$DESKTOP_BACKGROUND" ] ; then
    gconftool-2 --type string --set /desktop/gnome/background/picture_filename $DESKTOP_BACKGROUND
    gconftool-2 --type string --set /desktop/gnome/background/picture_options zoom
  fi

  # Maybe set:
  # /apps/gnome-session/options/splash_image == login page image

  # Remove the top panel
  gsettings set org.gnome.gnome-panel.layout toplevel-id-list "['bottom-panel']"

  # Add the main menu.  The problem is, we need to set the definition for object-0 too.
  # Unfortunately, we can't modify it; see below.
#-org.gnome.gnome-panel.layout object-id-list ['menu-bar', 'indicators', 'show-desktop', 'window-list', 'workspace-switcher']
#+org.gnome.gnome-panel.layout object-id-list ['menu-bar', 'indicators', 'show-desktop', 'window-list', 'workspace-switcher', 'object-0']

  # Desktop names
  gconftool-2 --type int --set /apps/metacity/general/num_workspaces 4
  gconftool-2 --type string --set /apps/metacity/workspace_names/name_1 Dev
  gconftool-2 --type string --set /apps/metacity/workspace_names/name_2 Docs
  gconftool-2 --type string --set /apps/metacity/workspace_names/name_3 VM
  gconftool-2 --type string --set /apps/metacity/workspace_names/name_4 Web

  # Documentation on gconf tool is here:
  # http://library.gnome.org/admin/system-admin-guide/stable/gconf-8.html.en

  # To dump all gconf variables:
  #
  #   gconftool-2 -R /
  #
  # To dump all dconf variables:
  #
  #   gsettings list-recursively
  #
  # Dump the output of both of these commands into two separate files;
  # then, change the settings you wish via the GUI, dump the settings again,
  # and diff against the old output.  If you do not see all of the information
  # from the settings that you changed, it means that preference is stored
  # in a schemaless key in dconf.  There is no really good way around this
  # problem.  All panel items, the number of rows in the workspace switcher,
  # and the settings to show workspace names are all examples of variables that
  # cannot be set.
  #
  # More info here:
  #
  # http://askubuntu.com/questions/126300/how-do-i-configure-the-gnome-panel-from-a-script

fi

exit 0

