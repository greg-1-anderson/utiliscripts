#!/bin/bash

# Use 'sed $INPLACE' for cross-platform 'sed -i'.
INPLACE="-i"
if [ "$OS" == "Darwin" ]
then
  INPLACE="-i ''"
fi

# Incude our private stuff, if the file exists
PRIVATE_BASHRC="$HOME/local/config/private-bashrc.rc"
if [ -f "$PRIVATE_BASHRC" ]
then
  source "$PRIVATE_BASHRC"
fi

# Require THREE ^D characters in a row to exit
export IGNOREEOF=2

# Prevent Control-S from freezing terminal output
stty stop undef

# Locale settings
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8

OS="$(uname -s)"

#
# Some aliases and functions that Greg likes:
#
alias sbrc='source $HOME/.bashrc'
alias lla='ls -A -l --si'
alias ll='ls -l --si'
alias la='ls -A'
alias l='ls -CF'
alias f="find -type f \! -path '*/.git/*'"
alias fj='find . -name "*.java"'
alias fppt='find . -name "*.ppt"'
alias fxls='find . -name "*.xls"'
alias portscan='nmap -sT -O'
alias openports='portscan localhost'
alias rmrej='rm `find -name "*.rej"` `find -name "*.orig"`'
alias rot13='tr a-zA-Z n-za-mN-ZA-M'
alias findtabs="find -not -regex '..*/\..*' -exec grep -HP '\t' {} \;"
alias pull-all='for x in * ; do if [ -d $x/.git ] ; then ( cd $x ; s=$(git status -s); if [ -z "$s" ] ; then echo "Update $x." ; git pull ; else echo "$x is modified; skipping update." ; fi ) fi done'
alias dr=drush
alias ..='cd ..'
alias tnq='tag-next -q && git push --tags'

if [ "$OS" == "Darwin" ] ; then
  alias ssh-copy-id='ssh-copy-id.sh'
  alias sublime_text='/Applications/Sublime\ Text.app/Contents/MacOS/Sublime\ Text'
fi

#
# Git aliases
#
git config --global alias.unstage 'reset HEAD --'
alias gl='git log --date=short --pretty=format:"%Cred%h %Cblue%cd %Cgreen%an%Creset %s" -12'
alias gls='git log --pretty=format:"%Cred%h %Cgreen%an%Creset %s" -12'
alias gs='git status'

#
# Terminus aliases
#
alias tli='terminus auth login greg.1.anderson@greenknowe.org'
alias tsa='terminus sites aliases'
alias ta='tli && tsa'

# Open a browser window on Byron's machine at home
alias byron='ssh byron@10.100.1.95 /usr/bin/env DISPLAY=":0.0" xdg-open'
# Tell Byron something
function tell-byron() { echo \"$@\"; ssh byron@10.100.1.95 /usr/bin/env DISPLAY=":0.0" notify-send \"$@\"; }
# No more Minecraft -- do your homework!
alias byron-end="sh -c 'ssh byron@10.100.1.95 /usr/bin/env DISPLAY=\":0.0\" gnome-screensaver-command --lock' && sh -c 'ssh root@10.100.1.95 pm-suspend' &"
# Polite warning before being done
alias polite-end='tell-byron "System going down in 3 minutes."; sleep 1m; tell-byron "Two-minute warning."; tell-byron "One more minute until shutdown."; sleep 50s; tell-byron "TEN SECONDS."; sleep 10s; byron-end'
# Allow a fixed amount of time
function byron-timer() { t=$1; if [ "$t" -gt 3 ] ; then tell-byron "You can play for $t minutes."; if [ "$t" -gt 10 ] ; then t=$((t-8)); sleep "${t}m"; tell-byron "Eight-minute warning."; t=8; fi ; t=$((t-3)); sleep "${t}m"; fi ; polite-end }
# Turn the whitelist on and off
function whitelist() { WHITELIST='--whitelist' ; if [ "x$1" == "xoff" ] ; then WHITELIST='--no-whitelist' ; fi ; sudo /sbin/firewall.sh $WHITELIST --log blocked ; }

function tolower() { tr A-Z a-z <<<$@; }
function mcd() { mkdir -p "$1" && cd "$1"; }

# Thanks to:
# http://stackoverflow.com/questions/141599/how-do-you-get-a-list-of-changes-from-a-subversion-repository-by-date-range
# http://stackoverflow.com/questions/2693173/log-of-svn-activity-for-a-certain-user
function lastweek() {
  svn log "$1" -r {$(date --date="Monday last week" "+%F")}:{$(date --date="Sunday last week" "+%F")} | filter-log-by-user "$2"
}

function _title {
  printf "\033];$1\007"
}

# Use 'title' function to change the name of your Terminal window.
# Make them easier to find in the window list.
function title {
  title="$1"
  if [ -z "$title" ]
  then
    title="$(basename "$(pwd)")"
  fi
  _title "$title"

  termwindow="$HOME/.termwindow/$(tty)"
  mkdir -p "$termwindow"
  echo $title > "$termwindow/title"
  cwd="$(pwd)"
  echo $cwd > "$termwindow/cwd"
  last="n/a"
  if [ -f "$termwindow/stack" ]
  then
    last="$(tail -n 1 $termwindow/stack)"
  fi
  if [ "$cwd" != "$last" ]
  then
    echo $cwd >> $termwindow/stack
  fi
}

# Go back to the directory where the 'title' was last run
function td {
  termwindow="$HOME/.termwindow/$(tty)"
  if [ -f "$termwindow/cwd" ]
  then
    cwd="$(cat $termwindow/cwd)"
    title="$(cat $termwindow/title)"
    _title "$title"
    cd "$cwd"
  fi
}

# Pop off the current 'title' directory and then go
# back to the last 'title' directory we were at before.
function pd {
  termwindow="$HOME/.termwindow/$(tty)"
  if [ -f "$termwindow/stack" ]
  then
    cur="$(tail -n 1 $termwindow/stack)"
    last="$(tail -n 2 $termwindow/stack | head -n 1)"
  fi
  if [ -n "$last" ]
  then
    cd "$last"
    _title "$(basename $last)"
    echo "$cur" > $termwindow/newstack
    cat $termwindow/stack | sed '$d' >> $termwindow/newstack
    mv -f $termwindow/newstack $termwindow/stack
  fi
}

# Like pd, but goes in the reverse direction
function rd {
  termwindow="$HOME/.termwindow/$(tty)"
  if [ -f "$termwindow/stack" ]
  then
    dir="$(head -n 1 $termwindow/stack)"
  fi
  if [ -n "$dir" ]
  then
    cd "$dir"
    sed $INPLACE -e '1d' $termwindow/stack
    title
  fi
}

# Find a directory with a specified name in one of
# our search locations
function fd {
  s="$1"
  for d in $(echo $FDPATH | tr ':' ' ')
  do
    if [ "${d:0:1}" != "/" ]
    then
      d="$HOME/$d"
    fi
    if [ -d "$d/$s" ]
    then
      cd "$d/$s"
      title
      break
    fi
  done
}

# Make yubikey work in current terminal window.
function yubi {
  export SSH_AUTH_SOCK=$(launchctl getenv SSH_AUTH_SOCK)
  ssh-add -e /usr/local/lib/opensc-pkcs11.so
  ssh-add -s /usr/local/lib/opensc-pkcs11.so
}

function filter-log-by-user {
  if [ -n "$1" ] ; then
    who="$1"
  elif [ -n "$SVNUSER" ] ; then
    who="$SVNUSER"
  else
    who="$(whoami)"
  fi
  sed -n "/| $SVNUSER |/,/-----\$/ p"
}

# Only useful on the corporate intranet.  Prerequisites:
#   sudo mkdir /mnt/public
#   sudo apt-get install cifs-utils
alias mount-public='sudo mount -t cifs -o user=ganderson //samba/public /mnt/public'

function fingerprints() {
  path="$1"
  if [ -z "$path" ]; then
    path="$HOME/.ssh/authorized_keys"
  fi
  local file="$path"
  while read l; do
    [[ -n $l && ${l###} = $l ]] && ssh-keygen -l -f /dev/stdin <<<$l
  done < $file
}

# cd to a sibling directory
function sib() {
  sibpath=$1
  sib=${sibpath%%/*}
  remaining=
  if [ "x$sib" != "x$sibpath" ] ; then
    remaining=${sibpath#*/}
  fi
  dir=$(pwd)
  target=

  if [ -z $# ] || [ -z "$sib" ] ; then
    echo "Usage: sib <name of sibling folder>" >&2
  else
    while [ -z "$target" ] && [ "$dir" != "/" ] && [ -n "$dir" ]; do
      dir=$(dirname "$dir")
      if [ -n "$remaining" ] ; then
        if [ -d "$dir/$sib/$remaining" ] ; then
          target="$dir/$sib/$remaining"
        fi
      else
        if [ -d "$dir/$sib" ] ; then
          target="$dir/$sib"
        fi
      fi
    done

    if [ -n "$target" ] ; then
      echo "$target"
      cd "$target"
    else
      echo "$sibpath not found" >&2
    fi
  fi
}

# 'bd' from https://github.com/vigneshwaranr/bd - thanks!
# (simplified to just do -s behavior if full match not found)
function bd() {
  if [ $# -eq 0 ]
  then
    echo "Usage: bd <name of some parent folder>" >&2
  else
    OLDPWD=`pwd`

    NEWPWD=`echo $OLDPWD | sed 's|\(.*/'$1'/\).*|\1|'`
    index=`echo $NEWPWD | awk '{ print index($1,"/'$1'/"); }'`
    if [ $index -eq 0 ]
    then
      NEWPWD=`echo $OLDPWD | sed 's|\(.*/'$1'[^/]*/\).*|\1|'`
      index=`echo $NEWPWD | awk '{ print index($1,"/'$1'"); }'`
    fi

    if [ $index -eq 0 ]
    then
      echo "No such occurrence."
    fi

    echo $NEWPWD
    cd "$NEWPWD"
  fi
}

# Prompt configuration
c_red='0;31m'
c_green='0;32m'
c_blue='0;34m'
c_lt_grey='0;37m'
c_reset='0m'

__prompt_color()
{
  # Use git colors if we have a .git directory
  if git rev-parse --git-dir >/dev/null 2>&1
  then
    if git diff --quiet 2>/dev/null >&2
    then
      echo $c_green
    else
      echo $c_red
    fi
    return 0
  fi

  # Use svn colors if we have a .svn directory
  if [ -d .svn ]
  then
    svnstatusoutput="`svn status 2>/dev/null | grep -v '^\?'`"
    if [ -z "$svnstatusoutput" ]
    then
      echo $c_green
    else
      echo $c_red
    fi
    return 0
  fi

  echo $c_reset
  return 0
}

__prompt_info()
{
  # Emit the git branch if we have a .git directory
  if git rev-parse --git-dir >/dev/null 2>&1
  then
    gitver="$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')"
    echo -e "[${gitver}] "
    return 0
  fi

  # Emit the svn revision if we have a .svn directory
  if [ -d .svn ]
  then
    svnrev=$(svn info 2>/dev/null | grep '^Revision' | sed -e 's/^[^:]*: *//g')
    if [ -n "$svnrev" ]
    then
      echo -e "(r${svnrev}) "
    fi
    return 0
  fi

}

if [ "`type __drush_ps1 2> /dev/null`" == "" ] ; then
  __drush_ps1() {
    return 0
  }
fi

if [ "x$TERM" != "xcygwin" ] ; then
  HOSTNAME=$(hostname -s)
  if [ "$HOSTNAME" == "vps" ] || [ "$HOSTNAME" == "server" ] ; then
    HOSTNAME=$(hostname -f | sed -e 's/^[^.]*\.//' -e 's/\..*//')
  fi
  PROMPT_COMMAND='_p=$(__prompt_info)'
  PS1='${_p:0:1}\[\e[$(__prompt_color)\]${_p:1:$((${#_p}-3))}\[\e[$c_reset\]${_p#"${_p%??}"}\[\e[$c_blue\]\u@'"$HOSTNAME"':\w\[\e[$c_reset\]\[\e[$c_green\]$(__drush_ps1)\[\e[$c_reset\]$ '
fi

# Assume that we will use vi
export EDITOR=vi

# Exit here if there is no DISPLAY
#[ -z "$DISPLAY" ] && return

# Set the editor to 'se' if it is available
s=`which sublime_text 2>/dev/null`
s2=`which se 2>/dev/null`
if [ -n "$s" ] && [ -n "$s2" ] ; then
  export EDITOR='se -w'
fi

#
# If drush is in the $PATH, then source the
# example bashrc it provides.
#
d=`which drush 2>/dev/null`
if [ -n "$d" ] ; then
  # If the file found is a symlink, resolve to the actual file
  d2=`readlink $d`
  # Get the directory that drush is stored in.
  # d2 might be relative or absolute path.
  if [ "x${d2:0:1}" == "x/" ] ; then
    d=$(dirname "$d2")
  else
    d=$(dirname $(dirname "$d")"/$d2")
  fi
  if [ -f "$d/examples/example.bashrc" ] ; then
    . "$d/examples/example.bashrc"
    # Add aliases for standard bash commands
    if [ -n "`type -t cddl`" ] ; then
      alias cd='cddl'
    fi
    if [ -n "`type -t lsd`" ] ; then
      alias ls='lsd'
    fi
    if [ -n "`type -t cpd`" ] ; then
      alias cp='cpd'
    fi
    if [ -n "`type -t dssh`" ] ; then
      alias ssh='dssh'
    fi
    if [ -n "`type -t gitd`" ] ; then
      alias git='gitd'
    fi
  fi
fi

if [ "$(uname -s)" != "Darwin" ]
then
  # Start up ssh-agent.  From http://mah.everybody.org/docs/ssh
  SSH_ENV="$HOME/.ssh/environment"

  function start_agent {
       echo "Initialising new SSH agent..."
       /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
       echo succeeded
       chmod 600 "${SSH_ENV}"
       . "${SSH_ENV}" > /dev/null
       /usr/bin/ssh-add;
  }

  # Source SSH settings, if applicable

  if [ -f "${SSH_ENV}" ]; then
       . "${SSH_ENV}" > /dev/null
       #ps ${SSH_AGENT_PID} doesn't work under cywgin
       ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
           start_agent;
       }
  else
       start_agent;
  fi
fi

